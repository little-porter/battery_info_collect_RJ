<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\Objects\battery_info_collect.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\Objects\battery_info_collect.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Aug 16 09:34:47 2025
<BR><P>
<H3>Maximum Stack Usage =       1100 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; iap_task &rArr; iap_upgrade_process &rArr; iap_upgrade &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[23]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[23]">ADC1_2_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[40]">ADC3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[4b]">ADC4_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from stm32f30x_it.o(i.BusFault_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[26]">CAN1_RX1_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[27]">CAN1_SCE_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[4c]">COMP1_2_3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[4d]">COMP4_5_6_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[4e]">COMP7_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel2_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel4_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[20]">DMA1_Channel5_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[21]">DMA1_Channel6_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[22]">DMA1_Channel7_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from adc.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel5_IRQHandler</a> from adc.o(i.DMA2_Channel5_IRQHandler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from stm32f30x_it.o(i.DebugMon_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[17]">EXTI0_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[39]">EXTI15_10_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[18]">EXTI1_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[19]">EXTI2_TS_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[1a]">EXTI3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[1b]">EXTI4_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[28]">EXTI9_5_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[15]">FLASH_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[52]">FPU_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[56]">GXHTC3_task_callback</a> from gxhtc3.o(i.GXHTC3_task_callback) referenced from gxhtc3.o(i.GXHTC3_task)
 <LI><a href="#[9]">HardFault_Handler</a> from stm32f30x_it.o(i.HardFault_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[31]">I2C1_ER_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[30]">I2C1_EV_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[33]">I2C2_ER_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[32]">I2C2_EV_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[a]">MemManage_Handler</a> from stm32f30x_it.o(i.MemManage_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from stm32f30x_it.o(i.NMI_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[57]">NTC_task_callback</a> from ntc.o(i.NTC_task_callback) referenced from ntc.o(i.NTC_task)
 <LI><a href="#[12]">PVD_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from stm32f30x_it.o(i.PendSV_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[16]">RCC_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[3a]">RTC_Alarm_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[14]">RTC_WKUP_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[34]">SPI1_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[35]">SPI2_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from stm32f30x_it.o(i.SVC_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from stm32f30x_it.o(i.SysTick_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[54]">SystemInit</a> from system_stm32f30x.o(i.SystemInit) referenced from startup_stm32f30x.o(.text)
 <LI><a href="#[13]">TAMPER_STAMP_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[29]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[2c]">TIM1_CC_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[2b]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[2a]">TIM1_UP_TIM16_IRQHandler</a> from stm32f30x_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[2d]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[2e]">TIM3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[2f]">TIM4_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[44]">TIM6_DAC_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[3c]">TIM8_BRK_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[3f]">TIM8_CC_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[3e]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[3d]">TIM8_UP_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[36]">USART1_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[37]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[38]">USART3_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[3b]">USBWakeUp_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[51]">USBWakeUp_RMP_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[24]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[4f]">USB_HP_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[25]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[50]">USB_LP_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from stm32f30x_it.o(i.UsageFault_Handler) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32f30x.o(.text) referenced from startup_stm32f30x.o(RESET)
 <LI><a href="#[55]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f30x.o(.text)
 <LI><a href="#[58]">battery_info_task_callback</a> from battery_info.o(i.battery_info_task_callback) referenced from battery_info.o(i.battery_info_task)
 <LI><a href="#[59]">gas_task_callback</a> from gas.o(i.gas_task_callback) referenced from gas.o(i.gas_task)
 <LI><a href="#[5a]">iap_task_callback</a> from iap.o(i.iap_task_callback) referenced from iap.o(i.iap_task)
 <LI><a href="#[5b]">led_task_callback</a> from led.o(i.led_task_callback) referenced from led.o(i.led_task)
 <LI><a href="#[53]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2]">si2c_devcie_stop</a> from si2c.o(i.si2c_devcie_stop) referenced 2 times from si2c.o(.data)
 <LI><a href="#[6]">si2c_device_recive_ack</a> from si2c.o(i.si2c_device_recive_ack) referenced 2 times from si2c.o(.data)
 <LI><a href="#[5]">si2c_device_send_ack</a> from si2c.o(i.si2c_device_send_ack) referenced 2 times from si2c.o(.data)
 <LI><a href="#[1]">si2c_device_start</a> from si2c.o(i.si2c_device_start) referenced 2 times from si2c.o(.data)
 <LI><a href="#[3]">si2c_device_write_byte</a> from si2c.o(i.si2c_device_write_byte) referenced 2 times from si2c.o(.data)
 <LI><a href="#[4]">sim_i2c_read_byte</a> from si2c.o(i.sim_i2c_read_byte) referenced 2 times from si2c.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[55]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[146]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[147]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[148]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[14a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>COMP4_5_6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>COMP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI2_TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USBWakeUp_RMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f30x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ack
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_data
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_read_data
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_read
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_error_ask
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[107]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_name_check
</UL>

<P><STRONG><a name="[fc]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_version_check
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_selfcheck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_selfcheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[151]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[152]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_selfcheck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_selfcheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_selfcheck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_selfcheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_selfcheck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_selfcheck
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[153]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[154]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[155]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[62]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b0]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[156]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[157]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[158]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[b7]"></a>ADC_CommonInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f30x_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[bb]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[ba]"></a>ADC_DMAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_DMAConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[71]"></a>ADC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f30x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[b6]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[bd]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[b8]"></a>ADC_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f30x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[b9]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, stm32f30x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[b4]"></a>ADC_SelectCalibrationMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_SelectCalibrationMode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[bf]"></a>ADC_StartConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[b3]"></a>ADC_VoltageRegulatorCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f30x_adc.o(i.ADC_VoltageRegulatorCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[df]"></a>DAC_Cmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f30x_dac.o(i.DAC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>

<P><STRONG><a name="[e0]"></a>DAC_DMACmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f30x_dac.o(i.DAC_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>

<P><STRONG><a name="[73]"></a>DAC_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f30x_dac.o(i.DAC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>

<P><STRONG><a name="[de]"></a>DAC_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f30x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>

<P><STRONG><a name="[e1]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f30x_dac.o(i.DAC_SetChannel2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>

<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adc.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel2_IRQHandler &rArr; battery_inres_window_ad_full
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_window_ad_full
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_calculate_flag_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_calculate_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, adc.o(i.DMA2_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Channel5_IRQHandler &rArr; battery_inres_window_ad_full
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_window_ad_full
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_calculate_flag_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_calculate_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_dma_config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>

<P><STRONG><a name="[c1]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_dma_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_dma2_ch2_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_dma2_ch5_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_dma2_ch1_config
</UL>

<P><STRONG><a name="[75]"></a>DMA_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_dma2_ch5_config
</UL>

<P><STRONG><a name="[c2]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f30x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_dma_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_dma2_ch2_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_dma2_ch5_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_dma2_ch1_config
</UL>

<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[7b]"></a>FLASH_ErasePage</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f30x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_iap_info_block
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
</UL>

<P><STRONG><a name="[7e]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e9]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_iap_info_block
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
</UL>

<P><STRONG><a name="[7d]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f30x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[e8]"></a>FLASH_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_iap_info_block
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
</UL>

<P><STRONG><a name="[7c]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f30x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f30x_gpio.o(i.GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_gpio_deinit
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_Init</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, stm32f30x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_sda_mode_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_gpio_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_gpio_config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_init
</UL>

<P><STRONG><a name="[143]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f30x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_gpio_config
</UL>

<P><STRONG><a name="[136]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_recive_ack
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_read_bit
</UL>

<P><STRONG><a name="[104]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_start
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_send_ack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_recive_ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_devcie_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_write_bit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_read_bit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_selfcheck
</UL>

<P><STRONG><a name="[103]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_write_byte
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_send_ack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_recive_ack
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_devcie_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_write_bit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_read_bit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_selfcheck
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_init
</UL>

<P><STRONG><a name="[80]"></a>GXHTC3_device_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gxhtc3.o(i.GXHTC3_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GXHTC3_device_init &rArr; si2c_device_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task_callback
</UL>

<P><STRONG><a name="[84]"></a>GXHTC3_device_read_data</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, gxhtc3.o(i.GXHTC3_device_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GXHTC3_device_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_read_temp_huty_value
</UL>

<P><STRONG><a name="[83]"></a>GXHTC3_device_read_temp_huty_value</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, gxhtc3.o(i.GXHTC3_device_read_temp_huty_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GXHTC3_device_read_temp_huty_value &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_crc8
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
</UL>

<P><STRONG><a name="[87]"></a>GXHTC3_device_selfcheck</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gxhtc3.o(i.GXHTC3_device_selfcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GXHTC3_device_selfcheck &rArr; GXHTC3_device_wake_up &rArr; GXHTC3_device_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task_callback
</UL>

<P><STRONG><a name="[8a]"></a>GXHTC3_device_send_cmd</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gxhtc3.o(i.GXHTC3_device_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GXHTC3_device_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_wake_up
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_temp_huty_no_stret_normal_measure
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_sleep
</UL>

<P><STRONG><a name="[89]"></a>GXHTC3_device_sleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gxhtc3.o(i.GXHTC3_device_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GXHTC3_device_sleep &rArr; GXHTC3_device_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
</UL>

<P><STRONG><a name="[8b]"></a>GXHTC3_device_temp_huty_no_stret_normal_measure</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gxhtc3.o(i.GXHTC3_device_temp_huty_no_stret_normal_measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GXHTC3_device_temp_huty_no_stret_normal_measure &rArr; GXHTC3_device_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
</UL>

<P><STRONG><a name="[88]"></a>GXHTC3_device_wake_up</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gxhtc3.o(i.GXHTC3_device_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GXHTC3_device_wake_up &rArr; GXHTC3_device_send_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_selfcheck
</UL>

<P><STRONG><a name="[8c]"></a>GXHTC3_device_work</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, gxhtc3.o(i.GXHTC3_device_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GXHTC3_device_work &rArr; GXHTC3_device_read_temp_huty_value &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_wake_up
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_temp_huty_no_stret_normal_measure
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_send_cmd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_read_temp_huty_value
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task_callback
</UL>

<P><STRONG><a name="[8d]"></a>GXHTC3_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gxhtc3.o(i.GXHTC3_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GXHTC3_task &rArr; sysTask_publish
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_publish
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>GXHTC3_task_callback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gxhtc3.o(i.GXHTC3_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GXHTC3_task_callback &rArr; GXHTC3_device_work &rArr; GXHTC3_device_read_temp_huty_value &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_work
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_selfcheck
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gxhtc3.o(i.GXHTC3_task)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>NTC_check</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ntc.o(i.NTC_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = NTC_check &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ntc_ad_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_temperture_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task_callback
</UL>

<P><STRONG><a name="[94]"></a>NTC_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ntc.o(i.NTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NTC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ntc_ad_value
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task_callback
</UL>

<P><STRONG><a name="[95]"></a>NTC_selfcheck</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ntc.o(i.NTC_selfcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NTC_selfcheck &rArr; average_filter_uint16_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ntc_ad_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task_callback
</UL>

<P><STRONG><a name="[96]"></a>NTC_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ntc.o(i.NTC_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NTC_task &rArr; sysTask_publish
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_publish
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>NTC_task_callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ntc.o(i.NTC_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = NTC_task_callback &rArr; NTC_check &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_selfcheck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ntc.o(i.NTC_task)
</UL>
<P><STRONG><a name="[93]"></a>NTC_temperture_calculate</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, ntc.o(i.NTC_temperture_calculate))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_check
</UL>

<P><STRONG><a name="[c5]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f30x_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_dma2_ch5_config
</UL>

<P><STRONG><a name="[128]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>OPAMP_Cmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f30x_opamp.o(i.OPAMP_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_opamp_config
</UL>

<P><STRONG><a name="[ce]"></a>OPAMP_DeInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_opamp.o(i.OPAMP_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_opamp_config
</UL>

<P><STRONG><a name="[d0]"></a>OPAMP_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f30x_opamp.o(i.OPAMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OPAMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_opamp_config
</UL>

<P><STRONG><a name="[d1]"></a>OPAMP_StartCalibration</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f30x_opamp.o(i.OPAMP_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_opamp_config
</UL>

<P><STRONG><a name="[cf]"></a>OPAMP_StructInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_opamp.o(i.OPAMP_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_opamp_config
</UL>

<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f30x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[81]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_gpio_config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_gpio_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_dma_config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_dma2_ch2_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_dma2_ch5_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_dma2_ch1_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_init
</UL>

<P><STRONG><a name="[72]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_AHBPeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[dd]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>

<P><STRONG><a name="[74]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[e4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_gpio_config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_init
</UL>

<P><STRONG><a name="[9d]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f30x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[a4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 1364 bytes, Stack size 28 bytes, stm32f30x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f30x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f30x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_incTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, system_stm32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f30x_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM2_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>TIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
</UL>

<P><STRONG><a name="[9c]"></a>TIM_DeInit</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, stm32f30x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
</UL>

<P><STRONG><a name="[9a]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f30x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_SelectOutputTrigger))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
</UL>

<P><STRONG><a name="[13b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
</UL>

<P><STRONG><a name="[13a]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
</UL>

<P><STRONG><a name="[37]"></a>USART2_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = USART2_IRQHandler &rArr; modbus_msg_deal_handler &rArr; modbus_write_ack &rArr; modbus_error_ask &rArr; uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_msg_deal_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f30x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>USART_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
</UL>

<P><STRONG><a name="[a2]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f30x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
</UL>

<P><STRONG><a name="[141]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_send
</UL>

<P><STRONG><a name="[9f]"></a>USART_GetITStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f30x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>USART_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f30x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
</UL>

<P><STRONG><a name="[a3]"></a>USART_Init</STRONG> (Thumb, 220 bytes, Stack size 120 bytes, stm32f30x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
</UL>

<P><STRONG><a name="[a0]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f30x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_send
</UL>

<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f30x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f30x.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a5]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
</UL>

<P><STRONG><a name="[ae]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a8]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a6]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ac]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a9]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[ad]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[15a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[b2]"></a>adc2_config</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, adc.o(i.adc2_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = adc2_config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VoltageRegulatorCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectCalibrationMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c0]"></a>adc2_dma2_ch1_config</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, adc.o(i.adc2_dma2_ch1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc2_dma2_ch1_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c3]"></a>adc3_config</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, adc.o(i.adc3_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = adc3_config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VoltageRegulatorCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectCalibrationMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c4]"></a>adc3_dma2_ch5_config</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, adc.o(i.adc3_dma2_ch5_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = adc3_dma2_ch5_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c7]"></a>adc4_config</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, adc.o(i.adc4_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = adc4_config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VoltageRegulatorCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SelectCalibrationMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c8]"></a>adc4_dma2_ch2_config</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, adc.o(i.adc4_dma2_ch2_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = adc4_dma2_ch2_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[c9]"></a>adc_gpio_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adc.o(i.adc_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_gpio_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[cb]"></a>adc_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = adc_init &rArr; adc4_config &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_opamp_config
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_gpio_config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_dma2_ch2_config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc4_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_dma2_ch5_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc3_config
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_dma2_ch1_config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>adc_opamp_config</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc.o(i.adc_opamp_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_opamp_config &rArr; OPAMP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPAMP_StructInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPAMP_StartCalibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPAMP_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPAMP_DeInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OPAMP_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[d3]"></a>average_filter_float_calculate</STRONG> (Thumb, 380 bytes, Stack size 64 bytes, average_filter.o(i.average_filter_float_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = average_filter_float_calculate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
</UL>

<P><STRONG><a name="[92]"></a>average_filter_uint16_calculate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, average_filter.o(i.average_filter_uint16_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = average_filter_uint16_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_selfcheck
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_selfcheck
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_check
</UL>

<P><STRONG><a name="[77]"></a>battery_info_calculate_flag_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery_info.o(i.battery_info_calculate_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>battery_info_calculate_flag_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, battery_info.o(i.battery_info_calculate_flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>battery_info_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, battery_info.o(i.battery_info_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = battery_info_task &rArr; sysTask_publish
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_publish
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>battery_info_task_callback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, battery_info.o(i.battery_info_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = battery_info_task_callback &rArr; battery_inres_calculate &rArr; average_filter_float_calculate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battery_info.o(i.battery_info_task)
</UL>
<P><STRONG><a name="[d7]"></a>battery_inres_calculate</STRONG> (Thumb, 342 bytes, Stack size 840 bytes, battery_info.o(i.battery_inres_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = battery_inres_calculate &rArr; average_filter_float_calculate &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bubbleSort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_float_calculate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_task_callback
</UL>

<P><STRONG><a name="[78]"></a>battery_inres_window_ad_full</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, battery_info.o(i.battery_inres_window_ad_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = battery_inres_window_ad_full
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>battery_voltage_calculate</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, battery_info.o(i.battery_voltage_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = battery_voltage_calculate &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_v_high_ad_value
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_task_callback
</UL>

<P><STRONG><a name="[da]"></a>bubbleSort</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, battery_info.o(i.bubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bubbleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
</UL>

<P><STRONG><a name="[85]"></a>calculate_crc8</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, crc8.o(i.calculate_crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calculate_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_read_temp_huty_value
</UL>

<P><STRONG><a name="[dc]"></a>dac_config</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dac.o(i.dac_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dac_config &rArr; DAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
</UL>

<P><STRONG><a name="[e2]"></a>dac_dma_config</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, dac.o(i.dac_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dac_dma_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
</UL>

<P><STRONG><a name="[e3]"></a>dac_gpio_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dac.o(i.dac_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dac_gpio_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
</UL>

<P><STRONG><a name="[e5]"></a>dac_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dac.o(i.dac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dac_init &rArr; dac_dma_config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateSquareWave
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_gpio_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_dma_config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[e7]"></a>flash_erase_iap_info_block</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash.o(i.flash_erase_iap_info_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_erase_iap_info_block &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_save
</UL>

<P><STRONG><a name="[ea]"></a>flash_erase_one_page</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, flash.o(i.flash_erase_one_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_erase_one_page &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
</UL>

<P><STRONG><a name="[f9]"></a>flash_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_read
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_init
</UL>

<P><STRONG><a name="[eb]"></a>flash_write</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_save
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
</UL>

<P><STRONG><a name="[ed]"></a>gas_co_calculate</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, gas.o(i.gas_co_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gas_co_calculate &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_co_ad_value
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_check_process
</UL>

<P><STRONG><a name="[ef]"></a>gas_co_check_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gas.o(i.gas_co_check_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gas_co_check_process &rArr; gas_co_calculate &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_selfcheck
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task_callback
</UL>

<P><STRONG><a name="[f0]"></a>gas_co_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gas.o(i.gas_co_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gas_co_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_co_ad_value
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_check_process
</UL>

<P><STRONG><a name="[f1]"></a>gas_co_selfcheck</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, gas.o(i.gas_co_selfcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gas_co_selfcheck &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_co_ad_value
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_check_process
</UL>

<P><STRONG><a name="[f2]"></a>gas_h2_calculate</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, gas.o(i.gas_h2_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gas_h2_calculate &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_h2_ad_value
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_check_process
</UL>

<P><STRONG><a name="[f4]"></a>gas_h2_check_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gas.o(i.gas_h2_check_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gas_h2_check_process &rArr; gas_h2_calculate &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_selfcheck
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task_callback
</UL>

<P><STRONG><a name="[f5]"></a>gas_h2_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gas.o(i.gas_h2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gas_h2_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_h2_ad_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_check_process
</UL>

<P><STRONG><a name="[f6]"></a>gas_h2_selfcheck</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, gas.o(i.gas_h2_selfcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = gas_h2_selfcheck &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_h2_ad_value
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_check_process
</UL>

<P><STRONG><a name="[f7]"></a>gas_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gas.o(i.gas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = gas_init &rArr; gas_param_init &rArr; gas_param_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>gas_param_init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, gas.o(i.gas_param_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = gas_param_init &rArr; gas_param_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_modbus_reg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_init
</UL>

<P><STRONG><a name="[fb]"></a>gas_param_modbus_reg_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, gas.o(i.gas_param_modbus_reg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = gas_param_modbus_reg_init &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_init
</UL>

<P><STRONG><a name="[fa]"></a>gas_param_save</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, gas.o(i.gas_param_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gas_param_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save_flag_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task_callback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_init
</UL>

<P><STRONG><a name="[fd]"></a>gas_param_save_flag_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gas.o(i.gas_param_save_flag_reset))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
</UL>

<P><STRONG><a name="[133]"></a>gas_param_save_flag_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gas.o(i.gas_param_save_flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
</UL>

<P><STRONG><a name="[132]"></a>gas_param_set</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, gas.o(i.gas_param_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gas_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
</UL>

<P><STRONG><a name="[fe]"></a>gas_smoke_check</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, gas.o(i.gas_smoke_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gas_smoke_check &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_smoke_ad_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check_process
</UL>

<P><STRONG><a name="[100]"></a>gas_smoke_check_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gas.o(i.gas_smoke_check_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gas_smoke_check_process &rArr; gas_smoke_check &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_selfcheck
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task_callback
</UL>

<P><STRONG><a name="[101]"></a>gas_smoke_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gas.o(i.gas_smoke_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gas_smoke_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check_process
</UL>

<P><STRONG><a name="[102]"></a>gas_smoke_selfcheck</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, gas.o(i.gas_smoke_selfcheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gas_smoke_selfcheck &rArr; average_filter_uint16_calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_smoke_ad_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;average_filter_uint16_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check_process
</UL>

<P><STRONG><a name="[105]"></a>gas_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gas.o(i.gas_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gas_task &rArr; sysTask_publish
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_publish
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>gas_task_callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gas.o(i.gas_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gas_task_callback &rArr; gas_h2_check_process &rArr; gas_h2_calculate &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check_process
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_check_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_check_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gas.o(i.gas_task)
</UL>
<P><STRONG><a name="[e6]"></a>generateSquareWave</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dac.o(i.generateSquareWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = generateSquareWave
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
</UL>

<P><STRONG><a name="[ee]"></a>get_co_ad_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(i.get_co_ad_value))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_selfcheck
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
</UL>

<P><STRONG><a name="[f3]"></a>get_h2_ad_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.get_h2_ad_value))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_selfcheck
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
</UL>

<P><STRONG><a name="[91]"></a>get_ntc_ad_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.get_ntc_ad_value))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_selfcheck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_check
</UL>

<P><STRONG><a name="[ff]"></a>get_smoke_ad_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.get_smoke_ad_value))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_selfcheck
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check
</UL>

<P><STRONG><a name="[db]"></a>get_v_high_ad_value</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i.get_v_high_ad_value))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
</UL>

<P><STRONG><a name="[106]"></a>iap_app_name_check</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, iap.o(i.iap_app_name_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iap_app_name_check &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task_callback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
</UL>

<P><STRONG><a name="[108]"></a>iap_app_update</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, iap.o(i.iap_app_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = iap_app_update &rArr; iap_info_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_save
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
</UL>

<P><STRONG><a name="[10a]"></a>iap_app_version_check</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iap.o(i.iap_app_version_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iap_app_version_check &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
</UL>

<P><STRONG><a name="[10b]"></a>iap_bin_crc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, iap.o(i.iap_bin_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iap_bin_crc &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[10d]"></a>iap_bin_size_check</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, iap.o(i.iap_bin_size_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = iap_bin_size_check &rArr; modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[11e]"></a>iap_finish_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iap.o(i.iap_finish_check))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[10e]"></a>iap_head_check</STRONG> (Thumb, 174 bytes, Stack size 1040 bytes, iap.o(i.iap_head_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = iap_head_check &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_read_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_read_bytes
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_version_check
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_name_check
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[113]"></a>iap_info_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iap.o(i.iap_info_init))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_read
</UL>

<P><STRONG><a name="[111]"></a>iap_info_read</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, iap.o(i.iap_info_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = iap_info_read &rArr; iap_info_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_save
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[109]"></a>iap_info_save</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iap.o(i.iap_info_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = iap_info_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_iap_info_block
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_read
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_update
</UL>

<P><STRONG><a name="[114]"></a>iap_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, iap.o(i.iap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = iap_init &rArr; iap_info_read &rArr; iap_info_save &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_read
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>iap_jump_app</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, iap.o(i.iap_jump_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iap_jump_app
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task_callback
</UL>

<P><STRONG><a name="[115]"></a>iap_msg_deal_handler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, iap.o(i.iap_msg_deal_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iap_msg_deal_handler &rArr; iap_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_msg_deal_handler
</UL>

<P><STRONG><a name="[10f]"></a>iap_read_bytes</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, iap.o(i.iap_read_bytes))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
</UL>

<P><STRONG><a name="[110]"></a>iap_read_data</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, iap.o(i.iap_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iap_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
</UL>

<P><STRONG><a name="[11c]"></a>iap_start_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iap.o(i.iap_start_check))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[118]"></a>iap_task</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, iap.o(i.iap_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = iap_task &rArr; iap_upgrade_process &rArr; iap_upgrade &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_publish
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_update
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>iap_task_callback</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, iap.o(i.iap_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iap_task_callback &rArr; iap_app_name_check &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_jump_app
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_app_name_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iap.o(i.iap_task)
</UL>
<P><STRONG><a name="[11d]"></a>iap_timeout_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iap.o(i.iap_timeout_check))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[11b]"></a>iap_upgrade</STRONG> (Thumb, 148 bytes, Stack size 1040 bytes, iap.o(i.iap_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = iap_upgrade &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_read_data
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase_one_page
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
</UL>

<P><STRONG><a name="[119]"></a>iap_upgrade_process</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, iap.o(i.iap_upgrade_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = iap_upgrade_process &rArr; iap_upgrade &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_timeout_check
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_start_check
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_info_save
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_head_check
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_finish_check
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_bin_size_check
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_bin_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
</UL>

<P><STRONG><a name="[116]"></a>iap_write_data</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, iap.o(i.iap_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iap_write_data
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_msg_deal_handler
</UL>

<P><STRONG><a name="[11f]"></a>led_blink</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led.o(i.led_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_blink &rArr; led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
</UL>

<P><STRONG><a name="[122]"></a>led_gpio_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, led.o(i.led_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[123]"></a>led_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = led_init &rArr; led_gpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>led_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[120]"></a>led_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(i.led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>

<P><STRONG><a name="[124]"></a>led_run</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led.o(i.led_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_run &rArr; led_blink &rArr; led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_blink
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task_callback
</UL>

<P><STRONG><a name="[125]"></a>led_task</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led.o(i.led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = led_task &rArr; sysTask_publish
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_publish
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>led_task_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.led_task_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = led_task_callback &rArr; led_run &rArr; led_blink &rArr; led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(i.led_task)
</UL>
<P><STRONG><a name="[53]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = main &rArr; iap_task &rArr; iap_upgrade_process &rArr; iap_upgrade &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_gpio_deinit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTask_execute_handler
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_generate_crcTable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_task
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10c]"></a>modbus_calculate_crc</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, modbus.o(i.modbus_calculate_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modbus_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_msg_deal_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_error_ask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_bin_crc
</UL>

<P><STRONG><a name="[12d]"></a>modbus_error_ask</STRONG> (Thumb, 88 bytes, Stack size 280 bytes, modbus.o(i.modbus_error_ask))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = modbus_error_ask &rArr; uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_send
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_calculate_crc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_msg_deal_handler
</UL>

<P><STRONG><a name="[126]"></a>modbus_generate_crcTable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, modbus.o(i.modbus_generate_crcTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modbus_generate_crcTable
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>modbus_msg_deal_handler</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, modbus.o(i.modbus_msg_deal_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = modbus_msg_deal_handler &rArr; modbus_write_ack &rArr; modbus_error_ask &rArr; uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_msg_deal_handler
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_error_ask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_calculate_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>modbus_read_ack</STRONG> (Thumb, 260 bytes, Stack size 288 bytes, modbus.o(i.modbus_read_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = modbus_read_ack &rArr; modbus_error_ask &rArr; uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_error_ask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_calculate_crc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_msg_deal_handler
</UL>

<P><STRONG><a name="[131]"></a>modbus_reg_data_reverse</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, modbus.o(i.modbus_reg_data_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modbus_reg_data_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_write
</UL>

<P><STRONG><a name="[86]"></a>modbus_reg_write</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, modbus.o(i.modbus_reg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = modbus_reg_write &rArr; modbus_reg_data_reverse
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_reg_data_reverse
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_upgrade_process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_bin_size_check
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_bin_crc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_voltage_calculate
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_inres_calculate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_smoke_check
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_modbus_reg_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_h2_calculate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_co_calculate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_check
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_read_temp_huty_value
</UL>

<P><STRONG><a name="[130]"></a>modbus_write_ack</STRONG> (Thumb, 298 bytes, Stack size 296 bytes, modbus.o(i.modbus_write_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = modbus_write_ack &rArr; modbus_error_ask &rArr; uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_data_send
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_param_save_flag_set
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_error_ask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_calculate_crc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_msg_deal_handler
</UL>

<P><STRONG><a name="[2]"></a>si2c_devcie_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, si2c.o(i.si2c_devcie_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = si2c_devcie_stop &rArr; si2c_device_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si2c.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>si2c_device_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, si2c.o(i.si2c_device_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = si2c_device_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_device_init
</UL>

<P><STRONG><a name="[6]"></a>si2c_device_recive_ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, si2c.o(i.si2c_device_recive_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = si2c_device_recive_ack &rArr; si2c_device_sda_mode_set &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_sda_mode_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si2c.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>si2c_device_send_ack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, si2c.o(i.si2c_device_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = si2c_device_send_ack &rArr; si2c_device_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si2c.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>si2c_device_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, si2c.o(i.si2c_device_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = si2c_device_start &rArr; si2c_device_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si2c.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>si2c_device_write_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si2c.o(i.si2c_device_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = si2c_device_write_byte &rArr; si2c_device_write_bit &rArr; si2c_device_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_write_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si2c.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>sim_i2c_read_byte</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, si2c.o(i.sim_i2c_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sim_i2c_read_byte &rArr; si2c_device_sda_mode_set &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_sda_mode_set
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_read_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> si2c.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[12c]"></a>sysTask_execute_handler</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, systask.o(i.sysTask_execute_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTask_execute_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>sysTask_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, systask.o(i.sysTask_init))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>sysTask_publish</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, systask.o(i.sysTask_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysTask_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task
</UL>

<P><STRONG><a name="[127]"></a>system_gpio_deinit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system.o(i.system_gpio_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = system_gpio_deinit &rArr; GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>system_incTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.system_incTick))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7a]"></a>system_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.system_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_timer_triggered
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>system_timer_triggered</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, system.o(i.system_timer_triggered))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_timer_triggered
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gas_task
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_info_task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_task
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GXHTC3_task
</UL>

<P><STRONG><a name="[139]"></a>timer2_config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.timer2_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer2_config &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[12a]"></a>timer_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timer.o(i.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_init &rArr; timer2_config &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>uart2_config</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, uart.o(i.uart2_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = uart2_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[142]"></a>uart2_gpio_config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(i.uart2_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart2_gpio_config &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_init
</UL>

<P><STRONG><a name="[12b]"></a>uart2_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart.o(i.uart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = uart2_init &rArr; uart2_config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_gpio_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_config
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>uart_data_send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart.o(i.uart_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_data_send
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_write_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_read_ack
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_error_ask
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[98]"></a>SetSysClock</STRONG> (Thumb, 230 bytes, Stack size 12 bytes, system_stm32f30x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[134]"></a>si2c_device_delay</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, si2c.o(i.si2c_device_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = si2c_device_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_start
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_send_ack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_recive_ack
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_devcie_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_write_bit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_read_bit
</UL>

<P><STRONG><a name="[135]"></a>si2c_device_read_bit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, si2c.o(i.si2c_device_read_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = si2c_device_read_bit &rArr; si2c_device_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_i2c_read_byte
</UL>

<P><STRONG><a name="[137]"></a>si2c_device_sda_mode_set</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, si2c.o(i.si2c_device_sda_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = si2c_device_sda_mode_set &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim_i2c_read_byte
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_recive_ack
</UL>

<P><STRONG><a name="[138]"></a>si2c_device_write_bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, si2c.o(i.si2c_device_write_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = si2c_device_write_bit &rArr; si2c_device_delay
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si2c_device_write_byte
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
